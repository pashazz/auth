#+SETUPFILE:  https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+TITLE: Обзор систем авторизации

* Решения авторизации

** Shiro
+ Сайт: https://shiro.apache.org
+ Java, лицензия Apache2
+ OAuth2 поддерживается отдельным решением: https://github.com/bujiio/buji-pac4j
+ Источник данных о пользователях - любой: для этого надо реализовать интерфейс [[https://shiro.apache.org/realm.html][Realm]].
+ Хорошая документация
+ RBAC и item-based permissions

*** Механизм аутентификации

*Subject* - принятый термин для пользователя

[[./img/ShiroAuthenticationSequence.png]]

1. Приложение вызывает ~Subject.login~ с аргументом типа ~AuthenticationToken~ (~token~)
2. экземпляр ~Subject~ вызывает ~SecurityManager.login~ с этим аргументом
3. ~SecurityManager~ вызывает ~Authenticator.authenticate(token)~
4. ~Authenticator~ выбирает ~Realm~ (источник данных о пользователе) и вызывает его, используя сконфигурированную ~AuthenticationStrategy~.
5. Каждый из доступных ~Realm~'ов сообщает, поддерживает ли он ~token~ данного типа, и если да, то для него вызывается ~getAuthenticationInfo(token)~, в котором производится попытка аунтетификации.


**** AuthenticationStrategy
Определяет, нужно ли аунтетифицировать по всем Realm или только по одному до первой успешной аунтетификации, и так далее.

*** Механизм авторизации

Когда вызывается метод ~Subject.isPermitted()~ или ~Subject.checkPermission()~

1. ~Subject~ делегирует в ~SecurityManager~
2. ~SecurityManager~ делегирует в ~Authorizer~
3. ~Authorizer~ опрашивает ~Realm~'ы:
   a. ~Realm~ Получает все Permissions и аггрегирует результат, затем делает wildcard matching.




** Keycloak

+ Поддерживается RedHat
+ Java
+ [[https://www.keycloak.org/docs/latest/authorization_services/][Руководство.]]


Совместим с OAuth2/UMA.


** ORY/Ladon

+ Golang
+ Совместим с OAuth2/UMA
+ Любая БД (необходимо реализовать один интерфейс для доступа, есть реализация для Redis)
+ https://github.com/ory/ladon лицензия Apache2.

** Casbin

*** Про реализацию пока не думаю, основные руководства на китайском. Начну с Ladon и потом keycloak (или наоборот).

Универсальная библиотека для поддержки access control с лицензией Apache 2.0

- Источник пользователей - внешний
- Авторизация - внешняя

Например, может использоваться [[Shiro][Shiro]]: https://github.com/jcasbin/jcasbin-shiro-plugin

*** Общие характеристики
- сайт: https://github.com/casbin/casbin
- языки: Go (язык реализации), биндинги: Java, Node.js, PHP, Python, C#, Rust (experimental)
- Поддерживаемые модели:
  + ACL
  + [[RBAC][RBAC]] с ресурсами и ролями
  + [[ABAC][ABAC]]

- Поддерживается RESTful API и приоритет правил.

*** Конфигурация
Модель прав доступа специфицируется конфигурационным файлом по метамодели PERM

* Модель контроля доступа
** DAC (Discretionary Access Control)

<<DAC>> - модель контроля доступа, который может быть передан субъектом другим субъектам. Например, _владелец_ файлов в UNIX может передать права на файлы другим субъектам.

** MAC (Mandatory Access Control)

Модель контроля доступа, в которой реализация запрещает субъектам передавать права доступа. Права доступа определяются администратором системы.



** RBAC (Role-Based Access Control)

#+CAPTION: RBAC
#+NAME: fig:RBAC
[[./img/rbac.jpg]]

<<RBAC>> - модель контроля доступа, в которой доступ к операции  производится на основании того, содержит ли роль субъекта соответствующую привилегию.

Роль - множество привилегий, доступных пользователям, которым присвоены соответсвующие роли.

Субъекту может быть присвоено несколько (0...n) ролей. Роли может быть присвоено несколько привилегий (возможностей исполнить операцию) и/или объектов.



** ABAC (Attribute-Based Access Control)
<<ABAC>> - модель контроля доступа, в которой во внимание принимаются свойства (атрибуты) субъекта или объекта, а также свойства окружения (дата, время доступа).

[[./img/abac.jpg]]

Например:
+ Пользователь(sub) может просмотреть документ(obj), если он(obj) создан коллегами из того же департамента
+ Пользователь(sub) может редактировать документ(obj), если он(subj) создал его(obj) и установлен режим черновика(obj).

** PERM
   Policy, Effect, Request, Matchers.



* Авторизация

** OAuth 2.0
Повсеместно используемое решение для авторизации - OAuth 2.0

Работает следующим образом:

#+ATTR_ORG: :width 900
[[./img/oauth2.jpg]]


1. Client посылает запрос к Authorization Server (AS)
2. Если Client не залогинен (кука нет или не валидный)
   1. AS выдает форму логина и проверяет, что пользователь вошел правильно.
      Источник пользователей - откуда угодно (DB, LDAP, etc)
3. AS возвращает некоторый Token
4. API Gateway видит запрос с Token
5. API Gateway отправляет Token на AS
6. Если Token верный, AS одобряет.


Доступ к отдельным объектам (Entities) в такой модели регулируется протоколом UMA:

#+TITLE: OAuth + UMA Protocol flow
#+BEGIN_SRC plantuml :file img/uma.png
participant rp as "requesting party"
participant client
participant authz as "authorization server"
participant  rs as "resource server"
participant ro as "resource owner"

skinparam maxMessageSize 250
skinparam sequenceMessageAlign center

ro -> authz: Set policy conditions (anytime)
client -> rs: Resource request (no access token)
rs -> client: 401 response with permission ticket, authz server location
client -> authz: Access token (RPT) request with permission ticket, claim token (push claims)
authz ->x authz: Claim assessment: FAIL (not authorized)
authz -> client: 403 response with new permission ticket, need_info error, redirect_user hint
client -> rp: Redirect user with permission ticket
rp -> authz: Follow redirect to authz server
rp <--> authz: Interactive claims gathering
authz -> rp: Redirect back with new permission ticket
rp -> client: Follow redirect to client
client -> authz: RPT request with permission ticket
authz -> authz: Claim assessment: OK
authz -> client: Response with RPT and PCT
client -> rs: Response request with RPT
rs -> client: Protected resource
#+END_SRC

#+RESULTS:
[[file:img/uma.png]]

*** Определения на схеме:
+ Requesting party - браузер
+ client - клиент, который хочет получить доступ к определенному ресурсу (часть веб-приложения или сам requesting party)
+ RPT - requesting party token - токен доступа OAuth
+ permission - авторизация доступа к определенному ресурсу с некоторому набором прав (scopes), привязанных к ресурсу
+ permission ticket - handle, представляющий запрошенные права доступа (permissions), необходимый в запросах к серверу авторизации
+ claim - запрос, представляющий требуемые атрибуты запрашиваемого ресурса/ов.
+ persisted claims token - токен, позволяющий много раз использовать набор claims для авторизации.


* Предлагаемое решение: Shiro

** Плюсы

+ [[Shiro][Модульная архитектура]] - позволяет подключить OAuth2, если это будет нужно (например, если приложение авторизации будет лишь авторизирующим микросервисом)
+ Возможность регулировки доступа вплоть до отдельной записи в БД:
#+begin_src java
//Если выдать permission troopers:update:0, то обновлять штурмовика №0 будет можно
@PostMapping(path = "/{id}")
    public Stormtrooper updateTrooper(@PathVariable("id") String id, @RequestBody Stormtrooper updatedTrooper) throws NotFoundException {
        // Instance-based annotations are not supported, so we use direct check instead:
        SecurityUtils.getSubject().checkPermission(String.format("troopers:update:%s", id));
        return trooperDao.updateStormtrooper(id, updatedTrooper);
    }

#+end_src

** Минусы

+  Медленная проверка permissions - O(n) в худшем случае:

*** Обработка permissions по умолчанию (выдержка из исходного кода)
#+begin_src java
   //visibility changed from private to protected per SHIRO-332
    protected boolean isPermitted(Permission permission, AuthorizationInfo info) {
        Collection<Permission> perms = getPermissions(info);
        if (perms != null && !perms.isEmpty()) {
            for (Permission perm : perms) {
                if (perm.implies(permission)) {
                    return true;
                }
            }
        }
        return false;
    }
#+end_src


Исправление: perm.implies использует wildcards. Возможно, стоит использовать более хитрую схему с хэш-таблицей (впрочем, данная реализация все равно единоразово подгружает все в память)

Источник данных JDBC реализован в классе JDBCRealm и его можно изменить

Кроме того, можно реализовать свой класс Permission, как показано [[https://www.baeldung.com/apache-shiro-access-control][здесь]].

*** Нет решения для аггрегации всех ресурсов по permission


Задал соответствующий вопрос [[http://shiro-user.582556.n2.nabble.com/Using-Shiro-for-permission-based-resource-lookup-td7582096.html][здесь.]]
** Демо-проект
https://github.com/pashazz/shiro-example

База данных штурмовиков из Звездных Войн. Сами штурмовики хранятся в памяти (hardcoded)

+ Использует Spring Boot
+ Информация о пользователях в файле src/main/resources/shiro-users.properties
+ В данном примере вы сможете обновить штурмовика #0 с помощью пользователя jcoder, но других - не сможете

*** shiro-users.properties
#+begin_src conf
# Пользователи начинаются с user.
# Сначала идет пароль, потом роли через запятую


user.root = secret,admin
user.emperor = secret,emperor
user.officer = secret,officer
user.jcoder = secret,underling

# Роли начинаются с role.
# Роли поддерживают wildcards
# Можно разрешить действия только на объектах с определенным id
role.emperor = *
role.admin = troopers:*
role.officer = troopers:create, troopers:read, troopers:update
role.underling = troopers:read, troopers:update:0
#+end_src

* Другие ссылки по теме
+ про реализацию RBAC на Rest https://cloudify.co/blog/simple-secure-role-based-access-control-rest-api-rbac-server-devops-cloud-orchestration/
+ Filter output: https://www.baeldung.com/spring-security-role-filter-json
+ ABAC with spring security: https://dzone.com/articles/simple-attribute-based-access-control-with-spring
